import numpy as np
from keras.models import Sequential
from keras.layers import Dropout, Dense, Flatten
from keras.optimizers import SGD
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.utils import np_utils as u
from keras.datasets import cifar10
import warnings
warnings.filterwarnings('ignore')
(X, y), (X_test, y_test) = cifar10.load_data()
import matplotlib.pyplot as plt
%matplotlib inline
plt.imshow((X[0]))
X, X_test = X.astype('float32')/255.0,X_test.astype('float32')/255.0
y, y_test = u.to_categorical(y, 10),u.to_categorical(y_test, 10)
model = Sequential()
model.add(Conv2D(32, (3, 3),input_shape=(32, 32, 3),
padding='same', activation='relu'))
model.add(Dropout(0.2))
model.add(Conv2D(32, (3, 3), activation='relu',
padding='valid'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(10, activation='softmax'))
epochs = 1
lrate = 0.01
decay = lrate/epochs
sgd = SGD(lr=lrate, momentum=0.9, decay=decay)
model.compile(loss='categorical_crossen
model.fit(X, y, validation_data=(X_test, y_test),
epochs=50, batch_size=512)
print("Accuracy: %.2f%%" %(model.evaluate(X_test,
y_test)[1]*100)
print(model.predict_classes(X[0:5]))
